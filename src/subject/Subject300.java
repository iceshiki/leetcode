package subject;


/**
 * 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
 * 子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。
 * <p>
 * <p>
 * 示例 1：
 * 输入：nums = [10,9,2,5,3,7,101,18]
 * 输出：4
 * 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
 * <p>
 * 示例 2：
 * 输入：nums = [0,1,0,3,2,3]
 * 输出：4
 * <p>
 * 示例 3：
 * 输入：nums = [7,7,7,7,7,7,7]
 * 输出：1
 * <p>
 * 提示：
 * 1 <= nums.length <= 2500
 * -104 <= nums[i] <= 104
 * <p>
 * 进阶：
 * 你能将算法的时间复杂度降低到 O(n log(n)) 吗?
 *
 * @level medium
 */
public class Subject300 {
    /**
     * 动态规划
     * @param nums
     * @return
     */
    public int lengthOfLISByDynamic(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int[] dp = new int[nums.length];
        dp[0] = 1;
        int maxans = 1;
        for (int i = 1; i < nums.length; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j]) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            maxans = Math.max(maxans, dp[i]);
        }
        return maxans;
    }

    /**
     * 贪心算法+二分查找
     *
     * @param nums
     * @return
     */
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int len = 1;
        int[] maxLengthNum = new int[n + 1];
        maxLengthNum[len] = nums[0];
        for (int i = 1; i < n; i++) {
            if (nums[i] > maxLengthNum[len]) {
                maxLengthNum[++len] = nums[i];
            } else {
                int l = 1;
                int r = len;
                int mid;
                int pos = 0;

                while (l <= r) {
                    mid = (r + l) / 2;
                    if (nums[i] > maxLengthNum[mid]) {
                        l = mid + 1;
                        pos = mid;
                    } else {
                        r = mid - 1;
                    }
                }
                maxLengthNum[pos + 1] = nums[i];
            }
        }
        return len;
    }


    public static void main(String[] args) {
        Subject300 subject300 = new Subject300();


        System.out.println(subject300.lengthOfLISByDynamic(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));
        System.out.println(subject300.lengthOfLIS(new int[]{0, 1, 0, 3, 2, 3}));
        System.out.println(subject300.lengthOfLIS(new int[]{7, 7, 7, 7, 7, 7, 7}));
        System.out.println(subject300.lengthOfLIS(new int[]{-147, -171, -584, 590, 501, 13, 489, -938, 396, -544, -229, 697, 157, -933, -264, -436, -691, -469, 49, -574, 694, 50, 672, -858, -923, 974, -157, -507, -907, 429, 529, -591, 802, -351, -606, 296, -485, 454, 540, 300, -1000, 408, 923, 0, -975, -548, 62, -990, 835, 650, 733, -611, -385, -580, 330, 394, 566, -191, 612, -608, -478, -104, -425, 58, -849, 601, 851, -208, -810, 400, 412, 571, -535, -995, 627, -481, -702, 457, -29, 375, 792, -186, -921, -275, 654, -356, -322, -28, -843, 527, -266, -970, 556, 852, -890, 169, -413, 2, -958, -651, 371, 895, -994, 671, 243, -605, -556, 735, -246, 179, -104, -771, 658, -554, 932, -829, -455, -981, -731, -148, 512, -547, -946, -997, -197, 864, 870, 629, -961, 659, 574, 543, -501, 582, -799, -428, 876, -334, 115, 759, 197, -905, 275, 76, 242, 357, 694, -254, -361, -338, -57, 596, 786, -710, -51, -496, -100, 246, -969, 874, 504, 938, 931, -365, 175, -40, -616, 596, 440, 567, 999, 15, -363, -256, -578, -869, -653, 78, -352, 882, 749, -33, 462, -592, -751, 761, -96, 206, 489, 34, 367, 960, 68, 837, 37, -764, -897, 72, 639, -69, 353, 836, -67, 491, 126, -171, -532, -757, -358, 217, 806, 712, -32, 843, -790, -691, -381, -138, 6, -712, 153, -184, -544, 3, 840, -561, 917, -704, -126, -230, 468, 963, -993, 445, -892, -543, 941, -665, 58, 268, -362, 181, -529, 684, 313, -380, -712, 700, 601, -962, -886, 702, 439, 153, -87, 140, 583, -323, 70, -460, -863, -859, -784, 571, 169, 44, -460, 181, 883, 600, 982, -367, -191, 815, -84, 961, -791, -713, 149, -499, 330, -351, -442, -989, -662, -183, -220, -617, -638, -916, 454, 604, 559, -304, -812, 526, -891, 984, -762, -669, -414, -481, -219, -776, 690, -72, -250, -282, -961}));
    }
}
